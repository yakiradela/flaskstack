name: CI/CD for Flaskstack

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-2
  CLUSTER_NAME: Flaskstack-cluster
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: flaskstack/infra/boostrap
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
      - run: terraform init
      - run: terraform apply -auto-approve

  infra:
    runs-on: ubuntu-latest
    needs: bootstrap
    defaults:
      run:
        working-directory: flaskstack/infra
    outputs:
      ecr_url: ${{ steps.ecr.outputs.url }}
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
      - run: terraform init -upgrade
      - run: terraform apply -auto-approve
      - name: Get ECR Repository URL
        id: ecr
        run: echo "url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT

  docker:
    runs-on: ubuntu-latest
    needs: infra
    steps:
      - uses: actions/checkout@v3
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ needs.infra.outputs.ecr_url }}
      - name: Build, tag, and push image to ECR
        run: |
          docker build -t ${{ needs.infra.outputs.ecr_url }}:latest -f flaskstack/Docker/Dockerfile flaskstack/Docker
          docker push ${{ needs.infra.outputs.ecr_url }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Generate kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      - name: Deploy aws-auth ConfigMap
        run: |
          helm upgrade --install aws-auth ./flaskstack/helm-chart \
            --namespace kube-system \
            --set awsAuth.mapUsers[0].userarn=arn:aws:iam::557690607676:user/flaskstack \
            --set awsAuth.mapUsers[0].username=flaskstack \
            --set awsAuth.mapUsers[0].groups[0]=system:masters \
            --set awsAuth.mapRoles[0].rolearn=arn:aws:iam::557690607676:role/eks-nodegroup-role \
            --set awsAuth.mapRoles[0].groups[0]=system:bootstrappers \
            --set awsAuth.mapRoles[0].groups[1]=system:nodes \
            --wait
      - name: Validate kubectl connection
        run: kubectl get nodes
      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - name: Deploy Flask App
        run: |
          helm upgrade --install flaskstack ./flaskstack/helm-chart \
            --namespace default \
            --values flaskstack/helm-chart/values.yaml \
            --wait

  postgres:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Generate kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      - name: Deploy PostgreSQL
        run: |
          helm upgrade --install postgres ./flaskstack/postgres-chart \
            --namespace default \
            --create-namespace

  cronjob:
    runs-on: ubuntu-latest
    needs: postgres
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Generate kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      - name: Apply CronJob
        run: |
          helm upgrade --install cronjob-backup flaskstack/cronjobs \
            --namespace default

  monitoring:
    runs-on: ubuntu-latest
    needs: cronjob
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Generate kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      - name: Install Monitoring Stack
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --create-namespace \
            -f flaskstack/monitoring/prometheus-values.yaml
