name: CI/CD for Flaskstack

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-2
  CLUSTER_NAME: Flaskstack-cluster
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: flaskstack/infra/boostrap
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
      - run: terraform init
      - run: terraform apply -auto-approve

  infra:
    runs-on: ubuntu-latest
    needs: bootstrap
    defaults:
      run:
        working-directory: flaskstack/infra
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
      - run: terraform init -upgrade
      - run: terraform apply -auto-approve -target=module.vpc -target=module.eks

  docker:
    runs-on: ubuntu-latest
    needs: infra
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Build Docker Image
        run: docker build -t yakiradela/flaskstack:latest ./flaskstack/Docker
      - name: Push Docker Image
        run: docker push yakiradela/flaskstack:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Generate kubeconfig via eksctl
        run: eksctl utils write-kubeconfig --region ${{ env.AWS_REGION }} --cluster ${{ env.CLUSTER_NAME }}

      - name: Verify cluster connection with eksctl
        run: |
          echo "Verifying EKS cluster connectivity..."
          eksctl get cluster --region ${{ env.AWS_REGION }}
          eksctl get nodegroup --cluster ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Deploy aws-auth ConfigMap
        run: |
          helm upgrade --install aws-auth ./flaskstack/helm-chart \
            --namespace kube-system \
            --set awsAuth.roleArn=arn:aws:iam::557690607676:user/flaskstack \
            --wait

      - name: Deploy Flask App
        run: |
          helm upgrade --install flaskstack ./flaskstack/helm-chart \
            --namespace default \
            --set global.image.repository=yakiradela/flaskstack \
            --set environments.dev.image.tag=latest \
            --set environment=dev \
            --wait

  postgres:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Ensure kubeconfig with eksctl
        run: eksctl utils write-kubeconfig --region ${{ env.AWS_REGION }} --cluster ${{ env.CLUSTER_NAME }}
      - name: Deploy PostgreSQL
        run: |
          helm upgrade --install postgres ./flaskstack/postgres-chart \
            --namespace default \
            --create-namespace

  cronjob:
    runs-on: ubuntu-latest
    needs: postgres
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Ensure kubeconfig with eksctl
        run: eksctl utils write-kubeconfig --region ${{ env.AWS_REGION }} --cluster ${{ env.CLUSTER_NAME }}
      - name: Apply CronJob
        run: kubectl apply -f flaskstack/cronjobs/backup-job.yaml

  monitoring:
    runs-on: ubuntu-latest
    needs: cronjob
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Ensure kubeconfig with eksctl
        run: eksctl utils write-kubeconfig --region ${{ env.AWS_REGION }} --cluster ${{ env.CLUSTER_NAME }}
      - name: Install Monitoring Stack
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --create-namespace \
            -f flaskstack/monitoring/prometheus-values.yaml
