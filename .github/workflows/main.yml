name: CI/CD for Flaskstack

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-2
  CLUSTER_NAME: Flaskstack-cluster
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
 

jobs:
  bootstrap:
    name: Terraform Bootstrap (S3 + DynamoDB)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: flaskstack/infra/boostrap
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
      - run: terraform init
      - run: terraform apply -auto-approve

  infra:
    name: Provision VPC + EKS
    runs-on: ubuntu-latest
    needs: bootstrap
    defaults:
      run:
        working-directory: flaskstack/infra
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
      - run: terraform init -upgrade
      - run: terraform apply -auto-approve

  auth:
    name: Authorize GitHub Actions IAM User & Setup Kubeconfig
    runs-on: ubuntu-latest
    needs: infra
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Map IAM user to aws-auth ConfigMap
        run: |
          USER_ARN="arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:user/flaskstack"
          echo "Checking if IAM user is already mapped..."
          if kubectl get configmap aws-auth -n kube-system -o yaml | grep -q "$USER_ARN"; then
            echo "IAM user already mapped to aws-auth ConfigMap."
          else
            echo "Mapping IAM user to aws-auth ConfigMap..."
            eksctl create iamidentitymapping \
              --region ${{ env.AWS_REGION }} \
              --cluster ${{ env.CLUSTER_NAME }} \
              --arn $USER_ARN \
              --username github-actions \
              --group system:masters
          fi

      - name: Verify access to cluster
        run: kubectl get nodes

  docker:
    name: Build & Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: auth
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR Repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPO_NAME }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPO_NAME }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS \
          --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          docker build -t $ECR_REPO_NAME:latest ./flaskstack/Docker
          docker tag $ECR_REPO_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:latest

  deploy:
    name: Deploy Flaskstack App
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Validate cluster access
        run: |
          kubectl get nodes
          kubectl cluster-info

      - name: Deploy Flask App with Helm
        run: |
          helm upgrade --install flaskstack ./flaskstack/helm-chart \
            --namespace default \
            --set global.image.repository=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME \
            --set environments.dev.image.tag=latest \
            --set environment=dev \
            --wait

  postgres:
    name: Deploy PostgreSQL
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      - name: Deploy PostgreSQL with Helm
        run: |
          helm upgrade --install postgres ./flaskstack/postgres-chart \
            --namespace default \
            --create-namespace

  cronjob:
    name: Deploy Backup CronJob
    runs-on: ubuntu-latest
    needs: postgres
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      - name: Apply CronJob YAML
        run: kubectl apply --validate=false -f flaskstack/cronjobs/backup-job.yaml

  monitoring:
    name: Deploy Monitoring Stack
    runs-on: ubuntu-latest
    needs: cronjob
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      - name: Install Prometheus
