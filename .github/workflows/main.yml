name: Flaskstack CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  CLUSTER_NAME: Flaskstack-cluster
  ECR_REPO_NAME: flaskstack-ecr
  AWS_ACCOUNT_ID: 557690607676
  AWS_ROLE_ARN: arn:aws:iam::557690607676:role/yakir

jobs:
  bootstrap:
    name: Terraform Bootstrap (S3 + DynamoDB)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: flaskstack/infra/bootstrap
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials via OIDC Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
      - run: terraform init
      - run: terraform apply -auto-approve

  infra:
    name: Provision VPC + EKS
    runs-on: ubuntu-latest
    needs: bootstrap
    defaults:
      run:
        working-directory: flaskstack/infra
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials via OIDC Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
      - run: terraform init -upgrade
      - run: terraform apply -auto-approve

  auth:
    name: Setup Kubeconfig and Test Access
    runs-on: ubuntu-latest
    needs: infra
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials via OIDC Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      - name: Verify Cluster Access
        run: kubectl get nodes

  docker:
    name: Build and Push Docker Image to Amazon ECR
    runs-on: ubuntu-latest
    needs: auth
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials via OIDC Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Create ECR Repository if Not Exists
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPO_NAME }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPO_NAME }}
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      - name: Build Docker Image
        run: docker build -t ${{ env.ECR_REPO_NAME }}:latest ./flaskstack/Docker
      - name: Tag Docker Image
        run: docker tag ${{ env.ECR_REPO_NAME }}:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_NAME }}:latest
      - name: Push Docker Image to ECR
        run: docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_NAME }}:latest

  deploy:
    name: Deploy Flaskstack to EKS with Helm
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials via OIDC Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      - name: Deploy Flaskstack Helm Chart
        run: |
          helm upgrade --install flaskstack ./flaskstack/helm-chart \
            --namespace default \
            --set global.image.repository=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_NAME }} \
            --set environments.dev.image.tag=latest \
            --wait

  postgres:
    name: Deploy PostgreSQL
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials via OIDC Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      - name: Deploy PostgreSQL Helm Chart
        run: |
          helm upgrade --install postgres ./flaskstack/postgres-chart \
            --namespace default \
            --create-namespace

  cronjob:
    name: Deploy Backup CronJob
    runs-on: ubuntu-latest
    needs: postgres
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials via OIDC Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      - name: Apply Backup CronJob YAML
        run: kubectl apply --validate=false -f flaskstack/cronjobs/backup-job.yaml

  monitoring:
    name: Deploy Monitoring Stack (Prometheus, Grafana, וכו')
    runs-on: ubuntu-latest
    needs: cronjob
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials via OIDC Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      - name: Install Prometheus and Monitoring Tools
        run: |
          echo "TODO: Install Monitoring stack"
